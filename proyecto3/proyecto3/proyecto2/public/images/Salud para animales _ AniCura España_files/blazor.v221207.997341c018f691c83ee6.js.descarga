var o={d:(n,e)=>{for(var t in e)o.o(e,t)&&!o.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},o:(o,n)=>Object.prototype.hasOwnProperty.call(o,n)},n={};o.d(n,{de:()=>e,pE:()=>t,gw:()=>r,tc:()=>c,vb:()=>i});const e=async o=>{console.warn("[Blazor] Blazor connection down");const n=window.Blazor;if(n)for(let e=0;e<o.maxRetries&&(console.info("[Blazor] Waiting for reconnect attempt #"+(e+1)+" ..."),await r(o.retryIntervalMilliseconds),n);e++)try{if(console.info("[Blazor] Starting Reconnect attempt #"+(e+1)+" ..."),await n.reconnect())return;console.error("[Blazor] Server Rejected")}catch(o){console.error(o)}document.location.reload()},t=o=>{console.info("[Blazor] connection is back up")},r=o=>new Promise((n=>setTimeout(n,o))),c=()=>{const o=window.Blazor;"visible"===document.visibilityState&&o&&o.reconnect&&(console.info("[Blazor] reconnecting"),window.Blazor.reconnect())},i=()=>{console.info("[Blazor] Initializing");const o=window.Blazor;if(o){try{o.start({reconnectionOptions:{maxRetries:10,retryIntervalMilliseconds:500},reconnectionHandler:{onConnectionDown:o=>e(o),onConnectionUp:o=>t(o)}}).then((()=>{console.info("[Blazor] started")}))}catch(o){console.error(o)}document.addEventListener("visibilitychange",c)}};document.addEventListener("DOMContentLoaded",(o=>{i()}));var a=n.tc,l=n.de,s=n.pE,d=n.gw,w=n.vb;export{a as checkTabFocused,l as connectionDown,s as connectionUp,d as delay,w as initBlazor};